# Generated by Django 4.1.1 on 2024-03-11 01:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import utils.funciones


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('personas', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actividad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Solo se permiten letras y espacios.', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_text', message='Debe contener letras, espacios', regex='^[A-Za-záéíóúÁÉÍÓÚñÑ\\s.]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='Aula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('normal', 'Normal'), ('computacion', 'Computación')], help_text='Tipo de aula', max_length=50)),
                ('numero', models.PositiveIntegerField(help_text='Numero de aula')),
                ('capacidad', models.PositiveIntegerField(help_text='Capacidad máxima')),
            ],
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Capacitación'), (1, 'Cultura'), (2, 'Gimnasio Saludable')], null=True)),
                ('requiere_certificado_medico', models.BooleanField(default=False)),
                ('requiere_equipamiento_informatico', models.BooleanField(default=False)),
                ('es_convenio', models.BooleanField(default=False)),
                ('modulos_totales', models.PositiveIntegerField(help_text='Horas totales del curso')),
                ('nombre', models.CharField(help_text='Sin caracteres especiales.', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_text', message='Sin caracteres especiales.', regex='^[A-Za-z0-9\\sñÑ]+$')])),
                ('descripcion', models.CharField(help_text='Descripción del curso', max_length=255, validators=[django.core.validators.RegexValidator(code='invalid_text', message='Sin caracteres especiales.', regex='^[A-Za-z0-9\\sñÑ]+$')])),
                ('costo', models.DecimalField(blank=True, decimal_places=0, default=0, help_text='Costo total del curso', max_digits=10, null=True)),
                ('actividad', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cursos.actividad')),
            ],
        ),
        migrations.CreateModel(
            name='Dictado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modulos_por_clase', models.PositiveIntegerField(help_text='Horas por clase')),
                ('asistencia_obligatoria', models.BooleanField(default=False)),
                ('periodo_pago', models.PositiveSmallIntegerField(choices=[(1, 'mes'), (2, 'clase')])),
                ('estado', models.PositiveSmallIntegerField(choices=[(1, 'No iniciado'), (2, 'En curso'), (3, 'Finalizado')])),
                ('fecha', models.DateTimeField(help_text='Seleccione la fecha de inicio')),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
                ('cupo', models.PositiveIntegerField(help_text='Máximo alumnos inscriptos', validators=[django.core.validators.MinValueValidator(1, message='Valor mínimo permitido es 1.'), django.core.validators.MaxValueValidator(100, message='Valor máximo es 100.')])),
                ('descuento', models.PositiveIntegerField(help_text='Exclusivo para afiliados', validators=[django.core.validators.MinValueValidator(0, message='El descuento no puede ser menor que 0.'), django.core.validators.MaxValueValidator(100, message='El descuento no puede ser mayor que 100.')])),
                ('curso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dictado_set', to='cursos.curso')),
            ],
        ),
        migrations.CreateModel(
            name='Horario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.PositiveSmallIntegerField(choices=[(0, 'Lunes'), (1, 'Martes'), (2, 'Miércoles'), (3, 'Jueves'), (4, 'Viernes')])),
                ('hora_inicio', models.TimeField(help_text='Ingrese la hora en formato de 24 horas (HH:MM)')),
                ('hora_fin', models.TimeField(blank=True, null=True)),
                ('es_primer_horario', models.BooleanField(default=False)),
                ('dictado', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='cursos.dictado')),
            ],
        ),
        migrations.CreateModel(
            name='Profesor',
            fields=[
                ('rol_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personas.rol')),
                ('ejerce_desde', models.DateField(null=True, validators=[utils.funciones.validate_no_mayor_actual])),
                ('actividades', models.ManyToManyField(blank=True, to='cursos.actividad')),
            ],
            bases=('personas.rol',),
        ),
        migrations.CreateModel(
            name='Titular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dictado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cursos.dictado')),
                ('profesor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cursos.profesor')),
            ],
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('aula', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='cursos.aula')),
                ('horario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservass', to='cursos.horario')),
            ],
        ),
        migrations.AddField(
            model_name='profesor',
            name='dictados',
            field=models.ManyToManyField(blank=True, related_name='profesores', through='cursos.Titular', to='cursos.dictado'),
        ),
        migrations.AddField(
            model_name='profesor',
            name='dictados_inscriptos',
            field=models.ManyToManyField(blank=True, related_name='profesores_dictados_inscriptos', to='cursos.dictado'),
        ),
        migrations.AddField(
            model_name='profesor',
            name='lista_espera',
            field=models.ManyToManyField(blank=True, related_name='profesores_en_espera', to='cursos.dictado'),
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asistencia_tomada', models.BooleanField(default=False)),
                ('asistencia', models.ManyToManyField(blank=True, related_name='asistencias', to='personas.rol')),
                ('asistencia_profesor', models.ManyToManyField(blank=True, related_name='asistencias_titular', to='cursos.profesor')),
                ('reserva', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clases', to='cursos.reserva')),
            ],
        ),
        migrations.CreateModel(
            name='Alumno',
            fields=[
                ('rol_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personas.rol')),
                ('dictados', models.ManyToManyField(blank=True, related_name='alumnos', to='cursos.dictado')),
                ('lista_espera', models.ManyToManyField(blank=True, related_name='alumnos_en_espera', to='cursos.dictado')),
            ],
            bases=('personas.rol',),
        ),
    ]
